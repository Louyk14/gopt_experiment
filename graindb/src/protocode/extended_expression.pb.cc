// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/extended_expression.proto

#include "duckdb/protocode/extended_expression.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace substrait {
PROTOBUF_CONSTEXPR ExpressionReference::ExpressionReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_names_)*/{}
  , /*decltype(_impl_.expr_type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ExpressionReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpressionReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpressionReferenceDefaultTypeInternal() {}
  union {
    ExpressionReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpressionReferenceDefaultTypeInternal _ExpressionReference_default_instance_;
PROTOBUF_CONSTEXPR ExtendedExpression::ExtendedExpression(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extension_uris_)*/{}
  , /*decltype(_impl_.extensions_)*/{}
  , /*decltype(_impl_.referred_expr_)*/{}
  , /*decltype(_impl_.expected_type_urls_)*/{}
  , /*decltype(_impl_.base_schema_)*/nullptr
  , /*decltype(_impl_.advanced_extensions_)*/nullptr
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtendedExpressionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendedExpressionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendedExpressionDefaultTypeInternal() {}
  union {
    ExtendedExpression _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendedExpressionDefaultTypeInternal _ExtendedExpression_default_instance_;
}  // namespace substrait
static ::_pb::Metadata file_level_metadata_substrait_2fextended_5fexpression_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_substrait_2fextended_5fexpression_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_substrait_2fextended_5fexpression_2eproto = nullptr;

const uint32_t TableStruct_substrait_2fextended_5fexpression_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExpressionReference, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::substrait::ExpressionReference, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::substrait::ExpressionReference, _impl_.output_names_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExpressionReference, _impl_.expr_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtendedExpression, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::substrait::ExtendedExpression, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtendedExpression, _impl_.extension_uris_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtendedExpression, _impl_.extensions_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtendedExpression, _impl_.referred_expr_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtendedExpression, _impl_.base_schema_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtendedExpression, _impl_.advanced_extensions_),
  PROTOBUF_FIELD_OFFSET(::substrait::ExtendedExpression, _impl_.expected_type_urls_),
};
static const ::_pbi::MigrationSchema ext_schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::substrait::ExpressionReference)},
  { 10, -1, -1, sizeof(::substrait::ExtendedExpression)},
};

static const ::_pb::Message* const ext_file_default_instances[] = {
  &::substrait::_ExpressionReference_default_instance_._instance,
  &::substrait::_ExtendedExpression_default_instance_._instance,
};

const char descriptor_table_protodef_substrait_2fextended_5fexpression_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#substrait/extended_expression.proto\022\ts"
  "ubstrait\032\027substrait/algebra.proto\032%subst"
  "rait/extensions/extensions.proto\032\024substr"
  "ait/plan.proto\032\024substrait/type.proto\"\226\001\n"
  "\023ExpressionReference\022+\n\nexpression\030\001 \001(\013"
  "2\025.substrait.ExpressionH\000\022/\n\007measure\030\002 \001"
  "(\0132\034.substrait.AggregateFunctionH\000\022\024\n\014ou"
  "tput_names\030\003 \003(\tB\013\n\texpr_type\"\207\003\n\022Extend"
  "edExpression\022#\n\007version\030\007 \001(\0132\022.substrai"
  "t.Version\022@\n\016extension_uris\030\001 \003(\0132(.subs"
  "trait.extensions.SimpleExtensionURI\022D\n\ne"
  "xtensions\030\002 \003(\01320.substrait.extensions.S"
  "impleExtensionDeclaration\0225\n\rreferred_ex"
  "pr\030\003 \003(\0132\036.substrait.ExpressionReference"
  "\022+\n\013base_schema\030\004 \001(\0132\026.substrait.NamedS"
  "truct\022D\n\023advanced_extensions\030\005 \001(\0132\'.sub"
  "strait.extensions.AdvancedExtension\022\032\n\022e"
  "xpected_type_urls\030\006 \003(\tBW\n\022io.substrait."
  "protoP\001Z*github.com/substrait-io/substra"
  "it-go/proto\252\002\022Substrait.Protobufb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_substrait_2fextended_5fexpression_2eproto_deps[4] = {
  &::descriptor_table_substrait_2falgebra_2eproto,
  &::descriptor_table_substrait_2fextensions_2fextensions_2eproto,
  &::descriptor_table_substrait_2fplan_2eproto,
  &::descriptor_table_substrait_2ftype_2eproto,
};
static ::_pbi::once_flag descriptor_table_substrait_2fextended_5fexpression_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_substrait_2fextended_5fexpression_2eproto = {
    false, false, 800, descriptor_table_protodef_substrait_2fextended_5fexpression_2eproto,
    "substrait/extended_expression.proto",
    &descriptor_table_substrait_2fextended_5fexpression_2eproto_once, descriptor_table_substrait_2fextended_5fexpression_2eproto_deps, 4, 2,
    ext_schemas, ext_file_default_instances, TableStruct_substrait_2fextended_5fexpression_2eproto::offsets,
    file_level_metadata_substrait_2fextended_5fexpression_2eproto, file_level_enum_descriptors_substrait_2fextended_5fexpression_2eproto,
    file_level_service_descriptors_substrait_2fextended_5fexpression_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_substrait_2fextended_5fexpression_2eproto_getter() {
  return &descriptor_table_substrait_2fextended_5fexpression_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_substrait_2fextended_5fexpression_2eproto(&descriptor_table_substrait_2fextended_5fexpression_2eproto);
namespace substrait {

// ===================================================================

class ExpressionReference::_Internal {
 public:
  static const ::substrait::Expression& expression(const ExpressionReference* msg);
  static const ::substrait::AggregateFunction& measure(const ExpressionReference* msg);
};

const ::substrait::Expression&
ExpressionReference::_Internal::expression(const ExpressionReference* msg) {
  return *msg->_impl_.expr_type_.expression_;
}
const ::substrait::AggregateFunction&
ExpressionReference::_Internal::measure(const ExpressionReference* msg) {
  return *msg->_impl_.expr_type_.measure_;
}
void ExpressionReference::set_allocated_expression(::substrait::Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr_type();
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expression));
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    set_has_expression();
    _impl_.expr_type_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ExpressionReference.expression)
}
void ExpressionReference::clear_expression() {
  if (_internal_has_expression()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.expr_type_.expression_;
    }
    clear_has_expr_type();
  }
}
void ExpressionReference::set_allocated_measure(::substrait::AggregateFunction* measure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_expr_type();
  if (measure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measure));
    if (message_arena != submessage_arena) {
      measure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measure, submessage_arena);
    }
    set_has_measure();
    _impl_.expr_type_.measure_ = measure;
  }
  // @@protoc_insertion_point(field_set_allocated:substrait.ExpressionReference.measure)
}
void ExpressionReference::clear_measure() {
  if (_internal_has_measure()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.expr_type_.measure_;
    }
    clear_has_expr_type();
  }
}
ExpressionReference::ExpressionReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExpressionReference)
}
ExpressionReference::ExpressionReference(const ExpressionReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpressionReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_names_){from._impl_.output_names_}
    , decltype(_impl_.expr_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_expr_type();
  switch (from.expr_type_case()) {
    case kExpression: {
      _this->_internal_mutable_expression()->::substrait::Expression::MergeFrom(
          from._internal_expression());
      break;
    }
    case kMeasure: {
      _this->_internal_mutable_measure()->::substrait::AggregateFunction::MergeFrom(
          from._internal_measure());
      break;
    }
    case EXPR_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExpressionReference)
}

inline void ExpressionReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_names_){arena}
    , decltype(_impl_.expr_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_expr_type();
}

ExpressionReference::~ExpressionReference() {
  // @@protoc_insertion_point(destructor:substrait.ExpressionReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpressionReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_names_.~RepeatedPtrField();
  if (has_expr_type()) {
    clear_expr_type();
  }
}

void ExpressionReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpressionReference::clear_expr_type() {
// @@protoc_insertion_point(one_of_clear_start:substrait.ExpressionReference)
  switch (expr_type_case()) {
    case kExpression: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.expr_type_.expression_;
      }
      break;
    }
    case kMeasure: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.expr_type_.measure_;
      }
      break;
    }
    case EXPR_TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXPR_TYPE_NOT_SET;
}


void ExpressionReference::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExpressionReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_names_.Clear();
  clear_expr_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpressionReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .substrait.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.AggregateFunction measure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_measure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string output_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_output_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.ExpressionReference.output_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpressionReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExpressionReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .substrait.Expression expression = 1;
  if (_internal_has_expression()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::expression(this),
        _Internal::expression(this).GetCachedSize(), target, stream);
  }

  // .substrait.AggregateFunction measure = 2;
  if (_internal_has_measure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::measure(this),
        _Internal::measure(this).GetCachedSize(), target, stream);
  }

  // repeated string output_names = 3;
  for (int i = 0, n = this->_internal_output_names_size(); i < n; i++) {
    const auto& s = this->_internal_output_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ExpressionReference.output_names");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExpressionReference)
  return target;
}

size_t ExpressionReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExpressionReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string output_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.output_names_.size());
  for (int i = 0, n = _impl_.output_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.output_names_.Get(i));
  }

  switch (expr_type_case()) {
    // .substrait.Expression expression = 1;
    case kExpression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.expr_type_.expression_);
      break;
    }
    // .substrait.AggregateFunction measure = 2;
    case kMeasure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.expr_type_.measure_);
      break;
    }
    case EXPR_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpressionReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpressionReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpressionReference::GetClassData() const { return &_class_data_; }


void ExpressionReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpressionReference*>(&to_msg);
  auto& from = static_cast<const ExpressionReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExpressionReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.output_names_.MergeFrom(from._impl_.output_names_);
  switch (from.expr_type_case()) {
    case kExpression: {
      _this->_internal_mutable_expression()->::substrait::Expression::MergeFrom(
          from._internal_expression());
      break;
    }
    case kMeasure: {
      _this->_internal_mutable_measure()->::substrait::AggregateFunction::MergeFrom(
          from._internal_measure());
      break;
    }
    case EXPR_TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpressionReference::CopyFrom(const ExpressionReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExpressionReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressionReference::IsInitialized() const {
  return true;
}

void ExpressionReference::InternalSwap(ExpressionReference* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.output_names_.InternalSwap(&other->_impl_.output_names_);
  swap(_impl_.expr_type_, other->_impl_.expr_type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpressionReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fextended_5fexpression_2eproto_getter, &descriptor_table_substrait_2fextended_5fexpression_2eproto_once,
      file_level_metadata_substrait_2fextended_5fexpression_2eproto[0]);
}

// ===================================================================

class ExtendedExpression::_Internal {
 public:
  static const ::substrait::Version& version(const ExtendedExpression* msg);
  static const ::substrait::NamedStruct& base_schema(const ExtendedExpression* msg);
  static const ::substrait::extensions::AdvancedExtension& advanced_extensions(const ExtendedExpression* msg);
};

const ::substrait::Version&
ExtendedExpression::_Internal::version(const ExtendedExpression* msg) {
  return *msg->_impl_.version_;
}
const ::substrait::NamedStruct&
ExtendedExpression::_Internal::base_schema(const ExtendedExpression* msg) {
  return *msg->_impl_.base_schema_;
}
const ::substrait::extensions::AdvancedExtension&
ExtendedExpression::_Internal::advanced_extensions(const ExtendedExpression* msg) {
  return *msg->_impl_.advanced_extensions_;
}
void ExtendedExpression::clear_version() {
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
}
void ExtendedExpression::clear_extension_uris() {
  _impl_.extension_uris_.Clear();
}
void ExtendedExpression::clear_extensions() {
  _impl_.extensions_.Clear();
}
void ExtendedExpression::clear_base_schema() {
  if (GetArenaForAllocation() == nullptr && _impl_.base_schema_ != nullptr) {
    delete _impl_.base_schema_;
  }
  _impl_.base_schema_ = nullptr;
}
void ExtendedExpression::clear_advanced_extensions() {
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extensions_ != nullptr) {
    delete _impl_.advanced_extensions_;
  }
  _impl_.advanced_extensions_ = nullptr;
}
ExtendedExpression::ExtendedExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:substrait.ExtendedExpression)
}
ExtendedExpression::ExtendedExpression(const ExtendedExpression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendedExpression* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.extension_uris_){from._impl_.extension_uris_}
    , decltype(_impl_.extensions_){from._impl_.extensions_}
    , decltype(_impl_.referred_expr_){from._impl_.referred_expr_}
    , decltype(_impl_.expected_type_urls_){from._impl_.expected_type_urls_}
    , decltype(_impl_.base_schema_){nullptr}
    , decltype(_impl_.advanced_extensions_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_schema()) {
    _this->_impl_.base_schema_ = new ::substrait::NamedStruct(*from._impl_.base_schema_);
  }
  if (from._internal_has_advanced_extensions()) {
    _this->_impl_.advanced_extensions_ = new ::substrait::extensions::AdvancedExtension(*from._impl_.advanced_extensions_);
  }
  if (from._internal_has_version()) {
    _this->_impl_.version_ = new ::substrait::Version(*from._impl_.version_);
  }
  // @@protoc_insertion_point(copy_constructor:substrait.ExtendedExpression)
}

inline void ExtendedExpression::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.extension_uris_){arena}
    , decltype(_impl_.extensions_){arena}
    , decltype(_impl_.referred_expr_){arena}
    , decltype(_impl_.expected_type_urls_){arena}
    , decltype(_impl_.base_schema_){nullptr}
    , decltype(_impl_.advanced_extensions_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtendedExpression::~ExtendedExpression() {
  // @@protoc_insertion_point(destructor:substrait.ExtendedExpression)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendedExpression::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extension_uris_.~RepeatedPtrField();
  _impl_.extensions_.~RepeatedPtrField();
  _impl_.referred_expr_.~RepeatedPtrField();
  _impl_.expected_type_urls_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.base_schema_;
  if (this != internal_default_instance()) delete _impl_.advanced_extensions_;
  if (this != internal_default_instance()) delete _impl_.version_;
}

void ExtendedExpression::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendedExpression::Clear() {
// @@protoc_insertion_point(message_clear_start:substrait.ExtendedExpression)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extension_uris_.Clear();
  _impl_.extensions_.Clear();
  _impl_.referred_expr_.Clear();
  _impl_.expected_type_urls_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.base_schema_ != nullptr) {
    delete _impl_.base_schema_;
  }
  _impl_.base_schema_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.advanced_extensions_ != nullptr) {
    delete _impl_.advanced_extensions_;
  }
  _impl_.advanced_extensions_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.version_ != nullptr) {
    delete _impl_.version_;
  }
  _impl_.version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendedExpression::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extension_uris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .substrait.ExpressionReference referred_expr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referred_expr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.NamedStruct base_schema = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_schema(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .substrait.extensions.AdvancedExtension advanced_extensions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_advanced_extensions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string expected_type_urls = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_expected_type_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "substrait.ExtendedExpression.expected_type_urls"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .substrait.Version version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendedExpression::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:substrait.ExtendedExpression)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extension_uris_size()); i < n; i++) {
    const auto& repfield = this->_internal_extension_uris(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_extensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .substrait.ExpressionReference referred_expr = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referred_expr_size()); i < n; i++) {
    const auto& repfield = this->_internal_referred_expr(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .substrait.NamedStruct base_schema = 4;
  if (this->_internal_has_base_schema()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::base_schema(this),
        _Internal::base_schema(this).GetCachedSize(), target, stream);
  }

  // .substrait.extensions.AdvancedExtension advanced_extensions = 5;
  if (this->_internal_has_advanced_extensions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::advanced_extensions(this),
        _Internal::advanced_extensions(this).GetCachedSize(), target, stream);
  }

  // repeated string expected_type_urls = 6;
  for (int i = 0, n = this->_internal_expected_type_urls_size(); i < n; i++) {
    const auto& s = this->_internal_expected_type_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "substrait.ExtendedExpression.expected_type_urls");
    target = stream->WriteString(6, s, target);
  }

  // .substrait.Version version = 7;
  if (this->_internal_has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:substrait.ExtendedExpression)
  return target;
}

size_t ExtendedExpression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:substrait.ExtendedExpression)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
  total_size += 1UL * this->_internal_extension_uris_size();
  for (const auto& msg : this->_impl_.extension_uris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
  total_size += 1UL * this->_internal_extensions_size();
  for (const auto& msg : this->_impl_.extensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .substrait.ExpressionReference referred_expr = 3;
  total_size += 1UL * this->_internal_referred_expr_size();
  for (const auto& msg : this->_impl_.referred_expr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string expected_type_urls = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.expected_type_urls_.size());
  for (int i = 0, n = _impl_.expected_type_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.expected_type_urls_.Get(i));
  }

  // .substrait.NamedStruct base_schema = 4;
  if (this->_internal_has_base_schema()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_schema_);
  }

  // .substrait.extensions.AdvancedExtension advanced_extensions = 5;
  if (this->_internal_has_advanced_extensions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.advanced_extensions_);
  }

  // .substrait.Version version = 7;
  if (this->_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendedExpression::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendedExpression::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendedExpression::GetClassData() const { return &_class_data_; }


void ExtendedExpression::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendedExpression*>(&to_msg);
  auto& from = static_cast<const ExtendedExpression&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:substrait.ExtendedExpression)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extension_uris_.MergeFrom(from._impl_.extension_uris_);
  _this->_impl_.extensions_.MergeFrom(from._impl_.extensions_);
  _this->_impl_.referred_expr_.MergeFrom(from._impl_.referred_expr_);
  _this->_impl_.expected_type_urls_.MergeFrom(from._impl_.expected_type_urls_);
  if (from._internal_has_base_schema()) {
    _this->_internal_mutable_base_schema()->::substrait::NamedStruct::MergeFrom(
        from._internal_base_schema());
  }
  if (from._internal_has_advanced_extensions()) {
    _this->_internal_mutable_advanced_extensions()->::substrait::extensions::AdvancedExtension::MergeFrom(
        from._internal_advanced_extensions());
  }
  if (from._internal_has_version()) {
    _this->_internal_mutable_version()->::substrait::Version::MergeFrom(
        from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendedExpression::CopyFrom(const ExtendedExpression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:substrait.ExtendedExpression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedExpression::IsInitialized() const {
  return true;
}

void ExtendedExpression::InternalSwap(ExtendedExpression* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extension_uris_.InternalSwap(&other->_impl_.extension_uris_);
  _impl_.extensions_.InternalSwap(&other->_impl_.extensions_);
  _impl_.referred_expr_.InternalSwap(&other->_impl_.referred_expr_);
  _impl_.expected_type_urls_.InternalSwap(&other->_impl_.expected_type_urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendedExpression, _impl_.version_)
      + sizeof(ExtendedExpression::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(ExtendedExpression, _impl_.base_schema_)>(
          reinterpret_cast<char*>(&_impl_.base_schema_),
          reinterpret_cast<char*>(&other->_impl_.base_schema_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendedExpression::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_substrait_2fextended_5fexpression_2eproto_getter, &descriptor_table_substrait_2fextended_5fexpression_2eproto_once,
      file_level_metadata_substrait_2fextended_5fexpression_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::substrait::ExpressionReference*
Arena::CreateMaybeMessage< ::substrait::ExpressionReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExpressionReference >(arena);
}
template<> PROTOBUF_NOINLINE ::substrait::ExtendedExpression*
Arena::CreateMaybeMessage< ::substrait::ExtendedExpression >(Arena* arena) {
  return Arena::CreateMessageInternal< ::substrait::ExtendedExpression >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
