[1mdiff --git a/.gitignore b/.gitignore[m
[1mindex 6aa48eb..ef49871 100644[m
[1m--- a/.gitignore[m
[1m+++ b/.gitignore[m
[36m@@ -3,5 +3,10 @@[m [mgraindb/cmake-build-debug/[m
 graindb/cmake-build-release/[m
 duckdb/cmake-build-debug/[m
 duckdb/cmake-build-release/[m
[32m+[m[32m.ossutil_checkpoint/[m
 [m
[32m+[m[32m*.cmake[m
[32m+[m[32m**/CMakeFiles/[m
[32m+[m[32m*.a[m
[32m+[m[32m*.so[m
 graindb/third_party/sqllogictest[m
[1mdiff --git a/duckdb/examples/embedded-c++/CMakeFiles/example.dir/main.cpp.o b/duckdb/examples/embedded-c++/CMakeFiles/example.dir/main.cpp.o[m
[1mindex 2883838..e61eabb 100644[m
Binary files a/duckdb/examples/embedded-c++/CMakeFiles/example.dir/main.cpp.o and b/duckdb/examples/embedded-c++/CMakeFiles/example.dir/main.cpp.o differ
[1mdiff --git a/duckdb/examples/embedded-c++/example b/duckdb/examples/embedded-c++/example[m
[1mindex 34ddb2c..fe4ad2f 100755[m
Binary files a/duckdb/examples/embedded-c++/example and b/duckdb/examples/embedded-c++/example differ
[1mdiff --git a/duckdb/examples/embedded-c++/main.cpp b/duckdb/examples/embedded-c++/main.cpp[m
[1mindex ad0110d..405ee95 100644[m
[1m--- a/duckdb/examples/embedded-c++/main.cpp[m
[1m+++ b/duckdb/examples/embedded-c++/main.cpp[m
[36m@@ -139,27 +139,90 @@[m [mvoid create_db_conn(DuckDB& db, Connection& con) {[m
     //con.context->transaction.Commit();[m
 }[m
 [m
[32m+[m[32mvoid replace_all(std::string& str, const std::string& from, const std::string& to) {[m
[32m+[m[32m    if(from.empty())[m
[32m+[m[32m        return;[m
[32m+[m[32m    int start_pos = 0;[m
[32m+[m[32m    while((start_pos = str.find(from, start_pos)) != std::string::npos) {[m
[32m+[m[32m        str.replace(start_pos, from.length(), to);[m
[32m+[m[32m        start_pos += to.length(); // In case 'to' contains 'from', like replacing 'x' with 'yx'[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid generate_queries(string query_path, string para_path, std::vector<string>& generated_queries) {[m
[32m+[m[32m    std::ifstream para_file(para_path, std::ios::in);[m
[32m+[m
[32m+[m[32m    string schema, data;[m
[32m+[m[32m    std::getline(para_file, schema);[m
[32m+[m[32m    std::cout << schema << std::endl;[m
[32m+[m[32m    char delimiter = '|';[m
[32m+[m[32m    std::vector<string> slots;[m
[32m+[m
[32m+[m[32m    schema += delimiter;[m
[32m+[m[32m    string cur = "";[m
[32m+[m[32m    for (int i = 0; i < schema.size(); ++i) {[m
[32m+[m[32m        if (schema[i] == delimiter) {[m
[32m+[m[32m            cur = ":" + cur;[m
[32m+[m[32m            slots.push_back(cur);[m
[32m+[m[32m            cur.clear();[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            cur += schema[i];[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    std::ifstream query_file(query_path, std::ios::in);[m
[32m+[m[32m    std::stringstream buffer;[m
[32m+[m[32m    buffer << query_file.rdbuf();[m
[32m+[m[32m    string query_template(buffer.str());[m
[32m+[m[32m    replace_all(query_template, "\n", " ");[m
[32m+[m[41m    [m
[32m+[m[32m    while (std::getline(para_file, data)) {[m
[32m+[m[32m        int pos = 0;[m
[32m+[m[32m        int last = 0;[m
[32m+[m[32m        int indexer = 0;[m
[32m+[m[32m        data += "|";[m
[32m+[m
[32m+[m[32m        string query_template_tmp(query_template);[m
[32m+[m[32m        while ((pos = data.find(delimiter, last)) != std::string::npos) {[m
[32m+[m[32m            string token = data.substr(last, pos - last);[m
[32m+[m[32m            replace_all(query_template_tmp, slots[indexer], token);[m
[32m+[m[32m            indexer += 1;[m
[32m+[m[32m            last = pos + 1;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        generated_queries.push_back(query_template_tmp);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
 int main() {[m
     int count_num = 50;[m
[31m-    vector<string> constantval_list;[m
[31m-    getStringListFromFile("../../../../dataset/ldbc/sf1/person_0_0.csv", 0, count_num, constantval_list);[m
[32m+[m[32m    // vector<string> constantval_list;[m
[32m+[m[32m    // getStringListFromFile("../../../../dataset/ldbc/sf1/person_0_0.csv", 0, count_num, constantval_list);[m
     // constantval_list.push_back("4398046511870");[m
 [m
[31m-	std::cout << "Finish Reading" << " " << constantval_list.size() << std::endl;[m
[31m-	DuckDB db(nullptr);[m
[31m-	Connection con(db);[m
[31m-   create_db_conn(db, con);[m
[32m+[m[32m    vector<string> generated_queries;[m
[32m+[m[32m    string query_path = "../../../../dataset/ldbc/query/queries/interactive-complex-1.sql";[m
[32m+[m[32m    string para_path = "../../../../dataset/ldbc/query/paras/ic1.param";[m
[32m+[m[32m    generate_queries(query_path, para_path, generated_queries);[m
[32m+[m
[32m+[m[32m    std::cout << "Generate Queries Over" << std::endl;[m
[32m+[m
[32m+[m[32m    DuckDB db(nullptr);[m
[32m+[m[32m    Connection con(db);[m
[32m+[m[32m    create_db_conn(db, con);[m
 [m
[31m-    for (int i = 0; i < constantval_list.size(); ++i) {[m
[32m+[m[32m    for (int i = 0; i < generated_queries.size(); ++i) {[m
         //con.context->transaction.SetAutoCommit(false);[m
         //con.context->transaction.BeginTransaction();[m
 	// std::cout << i << std::endl;[m
[31m-        con.context->SetPbParameters(1, "output/sf1/duckdb/query" + to_string(i) + ".log");[m
[31m-        con.QueryPb("SELECT f.title FROM "[m
[31m-                        "Knows k1, Person p2, HasMember hm, Forum f, ContainerOf cof, Post po, HasCreator hc "[m
[31m-                        "WHERE p2.id = k1.id2 AND p2.id = hm.personId AND f.id = hm.forumId AND f.id = cof.forumId AND "[m
[31m-                        "po.id = cof.postId AND po.id = hc.postId AND p2.id = hc.personId AND k1.id1 = \'"[m
[31m-                        + constantval_list[i] + "\'");[m
[32m+[m[32m        con.context->SetPbParameters(1, "../../../../output/sf1/duckdb/query" + to_string(i) + ".log");[m
[32m+[m[32m        con.QueryPb(generated_queries[i]);[m
[32m+[m[32m        // con.QueryPb("SELECT f.title FROM "[m
[32m+[m[32m        //                "Knows k1, Person p2, HasMember hm, Forum f, ContainerOf cof, Post po, HasCreator hc "[m
[32m+[m[32m        //                "WHERE p2.id = k1.id2 AND p2.id = hm.personId AND f.id = hm.forumId AND f.id = cof.forumId AND "[m
[32m+[m[32m        //                "po.id = cof.postId AND po.id = hc.postId AND p2.id = hc.personId AND k1.id1 = \'"[m
[32m+[m[32m        //                + constantval_list[i] + "\'");[m
 [m
         //con.context->transaction.Commit();[m
     }[m
[1mdiff --git a/duckdb/src/CMakeFiles/duckdb.dir/__/examples/embedded-c++/main.cpp.o b/duckdb/src/CMakeFiles/duckdb.dir/__/examples/embedded-c++/main.cpp.o[m
[1mindex 87ae775..c783a8a 100644[m
Binary files a/duckdb/src/CMakeFiles/duckdb.dir/__/examples/embedded-c++/main.cpp.o and b/duckdb/src/CMakeFiles/duckdb.dir/__/examples/embedded-c++/main.cpp.o differ
[1mdiff --git a/duckdb/src/libduckdb.so b/duckdb/src/libduckdb.so[m
[1mindex 4835167..9a68c30 100755[m
Binary files a/duckdb/src/libduckdb.so and b/duckdb/src/libduckdb.so differ
[1mdiff --git a/graindb/examples/embedded-c++/CMakeFiles/example-c++.dir/__/programmatic-querying/main_pb.cpp.o b/graindb/examples/embedded-c++/CMakeFiles/example-c++.dir/__/programmatic-querying/main_pb.cpp.o[m
[1mindex 2829df6..a3bfbcb 100644[m
Binary files a/graindb/examples/embedded-c++/CMakeFiles/example-c++.dir/__/programmatic-querying/main_pb.cpp.o and b/graindb/examples/embedded-c++/CMakeFiles/example-c++.dir/__/programmatic-querying/main_pb.cpp.o differ
[1mdiff --git a/graindb/examples/embedded-c++/example-c++ b/graindb/examples/embedded-c++/example-c++[m
[1mindex df72511..589d30b 100755[m
Binary files a/graindb/examples/embedded-c++/example-c++ and b/graindb/examples/embedded-c++/example-c++ differ
[1mdiff --git a/graindb/examples/programmatic-querying/main_pb.cpp b/graindb/examples/programmatic-querying/main_pb.cpp[m
[1mindex 0f125fc..b95d361 100644[m
[1m--- a/graindb/examples/programmatic-querying/main_pb.cpp[m
[1m+++ b/graindb/examples/programmatic-querying/main_pb.cpp[m
[36m@@ -258,7 +258,7 @@[m [mint main() {[m
 		con.context->transaction.SetAutoCommit(false);[m
 		con.context->transaction.BeginTransaction();[m
 [m
[31m-        	con.context->SetPbParameters(2, "output/sf1/duckdb/" + to_string(i) + ".log");[m
[32m+[m[41m        [m	[32mcon.context->SetPbParameters(2, "../../../../output/sf1/duckdb/query" + to_string(i) + ".log");[m
 		// con.context->SetPbParameters(0, "output/query" + to_string(i) + ".log");[m
 		auto result =[m
 		    con.Query("SELECT f.title FROM "[m
